{
  "openapi": "3.0.0",
  "info": {
    "version": "1.0.0",
    "title": "Student Store CRUD",
    "description": "Studen Store Application API",
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "host": "localhost:3000",
  "basePath": "/",
  "tags": [
    {
      "name": "Auth",
      "description": "API for auth endpoints"
    },
    {
      "name": "Products",
      "description": "API for products endpoints"
    },
    {
      "name": "Orders",
      "description": "API for order operations"
    },
    {
      "name": "Users",
      "description": "API for users in the system"
    },
    {
      "name": "Donations",
      "description": "API for donation related operations"
    }
  ],
  "paths": {
    "/api/auth/signup": {
      "post": {
        "tags": ["Auth"],
        "summary": "Classic user sign-up functionality using database",
        "description": "Register user for the system",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/userRequestBody"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "New user object created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/returnedUser"
                }
              }
            }
          },
          "400": {
            "description": "Validation error!",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Email already exists!"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/signin": {
      "post": {
        "tags": ["Auth"],
        "summary": "Classic user sign-in functionality using database",
        "description": "Log the user in with credentials.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "example": "griffin@mail.com"
                  },
                  "password": {
                    "type": "string",
                    "example": "abC123"
                  }
                },
                "required": ["email", "password"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User successfully logged in.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/returnedUser"
                }
              }
            }
          },
          "401": {
            "description": "User credentials are invalid!",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Invalid email or password!"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/google": {
      "get": {
        "tags": ["Auth"],
        "summary": "Authenticates user by Google 3rd party authentication service",
        "responses": {
          "200": {
            "description": "Redirects verified user to the home page",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/Profile"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          }
        }
      }
    },
    "/api/auth/facebook": {
      "get": {
        "tags": ["Auth"],
        "summary": "Authenticates user by Facebook 3rd party authentication service",
        "description": "Provide Facebook login to users",
        "responses": {
          "200": {
            "description": "Successful login",
            "schema": {
              "$ref": "#/definitions/Profile"
            }
          },
          "400": {
            "description": "Invalid request"
          }
        }
      }
    },
    "/api/auth/twitter": {
      "get": {
        "tags": ["Auth"],
        "summary": "Authenticates user by Twitter 3rd party authentication service",
        "responses": {
          "200": {
            "description": "Redirects verified user to the home page",
            "schema": {
              "$ref": "#/definitions/Profile"
            }
          },
          "400": {
            "description": "Invalid request"
          }
        }
      }
    },
    "/api/auth/logout": {
      "post": {
        "tags": ["Auth"],
        "summary": "Log out currently signed in user",
        "description": "Logs out currently signed user",
        "responses": {
          "205": {
            "description": "User logged out successfully."
          }
        }
      }
    },
    "/api/products/": {
      "get": {
        "tags": ["Products"],
        "summary": "Get all products that are for sale",
        "description": "Fetch all products from database.",
        "responses": {
          "200": {
            "description": "All products in the system are successfully fetched.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/returnedProduct"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Products"],
        "summary": "List a new product",
        "description": "Add new product.",
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/productRequestBody"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "New product added.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/returnedProduct"
                }
              }
            }
          },
          "400": {
            "description": "Validation error!",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "msg": {
                            "type": "string",
                            "example": "Product name cannot be empty!"
                          },
                          "param": {
                            "type": "string",
                            "example": "title"
                          },
                          "location": {
                            "type": "string",
                            "example": "body"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "No cover image has been uploaded!",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Cover image cannot be empty!"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Invalid file format!",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Only png, jpg, and jpeg image formats are allowed!"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/products/{id}": {
      "get": {
        "tags": ["Products"],
        "summary": "Get product with given id",
        "description": "Fetch the product specified by id.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of the product to be fetched",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Product specified by id is successfully fetched.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/returnedProduct"
                }
              }
            }
          },
          "404": {
            "description": "Product not found!",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Product not found!"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Products"],
        "summary": "Update product with given id",
        "description": "Updates existing product and returns new product",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "example": "Football"
                  },
                  "description": {
                    "type": "string",
                    "example": "Adidas XY3150 football"
                  },
                  "price": {
                    "type": "number",
                    "example": 80
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of the product to be modified",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns updated product!",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/returnedProduct"
                }
              }
            }
          },
          "400": {
            "description": "Validation error!",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "No product exists!"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Products"],
        "summary": "Delete product with given id",
        "description": "Delete a product",
        "operationId": "deleteProduct",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of product to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Product deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "string",
                      "example": true
                    },
                    "data": {
                      "type": "string",
                      "example": "Product deleted successfully."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Product not found!",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "string",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Product not found!"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/products/{id}/request": {
      "post": {
        "tags": ["Products"],
        "summary": "Create a new request to buy the product with given id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of the product to request",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/productRequestBody"
                }
              }
            }
          },
          "404": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "Invalid request!"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "You can not request your own product!",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "You can not request your own product!"
                    }
                  }
                }
              }
            }
          },
          "410": {
            "description": "Product has been sold out!",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Product has been sold out!"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/products/{id}/requested-buyers": {
      "get": {
        "tags": ["Products"],
        "summary": "Get the users who requested the product with given id",
        "description": "Get all the buyers for a product.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Product ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All the buyers for a product.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "_id": {
                            "type": "string",
                            "example": "630a63c3fd4adfdbd8ba9d62"
                          },
                          "firstName": {
                            "type": "string",
                            "example": "Glenn"
                          },
                          "lastName": {
                            "type": "string",
                            "example": "Quagmire"
                          },
                          "email": {
                            "type": "string",
                            "example": "glenn@email.com"
                          },
                          "fullName": {
                            "type": "string",
                            "example": "Glenn Quagmire"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Product with {id} not found!",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Product with {id} not found!"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "User ${req.user.id} is not authorized to access or modify this product details!",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "User ${req.user.id} is not authorized to access or modify this product details!"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/products/{id}/requested-buyers/{userId}/sell": {
      "post": {
        "tags": ["Products"],
        "summary": "Sell product with given id to the specified user",
        "description": "Sell a product.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Product ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Your product was successfully sold",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/returnedProduct"
                }
              }
            }
          },
          "404": {
            "description": "The user is not among the requested buyers!",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "The selected user is not among the products' requesters"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "User with given id is not found in database!",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "User with given id is not found in database!"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Product with this id not found!",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Product not found!"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "You can not sell this product!",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Product already sold!"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/orders": {
      "get": {
        "tags": ["Orders"],
        "summary": "Get all orders of signed in user",
        "description": "Fetch all the orders of the logged user.",
        "responses": {
          "200": {
            "description": "All orders of the logged user are successfully fetched.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/returnedOrder"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized user!"
          }
        }
      }
    },
    "/api/orders/{id}": {
      "get": {
        "tags": ["Orders"],
        "summary": "Get specified order of signed in user with given id",
        "description": "Fetch the order with given id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of the order to request",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All orders of a user are successfully fetched.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/returnedOrder"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized user!"
          }
        }
      }
    },
    "/api/profile/": {
      "get": {
        "tags": ["Users"],
        "summary": "Get signed in user's profile",
        "responses": {
          "200": {
            "description": "User profile",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/Profile"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Users"],
        "summary": "Update profile of signed in user",
        "description": "Updates existing logged in profile and returns new profile",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "firstName": {
                    "type": "string",
                    "example": "Michael"
                  },
                  "lastName": {
                    "type": "string",
                    "example": "Jackson"
                  },
                  "oldPassword": {
                    "type": "string",
                    "example": "mikE123"
                  },
                  "password": {
                    "type": "string",
                    "example": "michA123"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns updated profile!",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/Profile"
                }
              }
            }
          },
          "400": {
            "description": "Validation error!",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Email already exists!"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Old password is not correct!",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Your old password is not correct please enter again!"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/profile/products": {
      "get": {
        "tags": ["Users"],
        "summary": "Get signed in user's listings",
        "description": "Get all products of a user for sale.",
        "responses": {
          "200": {
            "description": "All products of a user that is for sale are successfully fetched.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/returnedProduct"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized user!"
          }
        }
      }
    },
    "/api/donations/": {
      "post": {
        "tags": ["Donations"],
        "summary": "Make a donation",
        "description": "Make donations by specified amount",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "token": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "tok_1LZuNCGPwek4o8KsoCayeSgC"
                      },
                      "card": {
                        "type": "object",
                        "properties": {
                          "address_city": {
                            "type": "string",
                            "example": "Ankara"
                          },
                          "address_country": {
                            "type": "string",
                            "example": "Turkey"
                          },
                          "name": {
                            "type": "string",
                            "example": "Peter Griffin"
                          },
                          "last4": {
                            "type": "string",
                            "example": "4242"
                          }
                        }
                      },
                      "email": {
                        "type": "string",
                        "example": "griffin@mail.com"
                      },
                      "amount": {
                        "type": "number",
                        "example": 25
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Specified amount of donation is made.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/returnedDonation"
                }
              }
            }
          },
          "400": {
            "description": "Validation error!",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Amount should be greater than zero!"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "productRequestBody": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "example": "Leyden Cheese"
          },
          "description": {
            "type": "string",
            "example": "Cumin spiced cheese that originates from the Leiden area in the Netherlands."
          },
          "price": {
            "type": "number",
            "example": 200
          },
          "category": {
            "type": "string",
            "example": "Food"
          },
          "coverImage": {
            "type": "string",
            "format": "binary"
          },
          "images": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "binary"
            }
          },
          "type": {
            "type": "string",
            "enum": ["Product", "Service"]
          },
          "location[lat]": {
            "type": "number",
            "example": 36.42
          },
          "location[lng]": {
            "type": "number",
            "example": 26.45
          }
        }
      },
      "returnedProduct": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "data": {
            "type": "object",
            "properties": {
              "_id": {
                "type": "string",
                "example": "62ee685e158e683e851eccea"
              },
              "title": {
                "type": "string",
                "example": "Leyden Cheese"
              },
              "description": {
                "type": "string",
                "example": "Cumin spiced cheese that originates from the Leiden area in the Netherlands."
              },
              "price": {
                "type": "number",
                "example": 200
              },
              "category": {
                "type": "string",
                "example": "Food"
              },
              "coverImage": {
                "type": "string",
                "example": "http://www.cheese.com/leyden"
              },
              "images": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "type": {
                "type": "string",
                "enum": ["Product", "Service"]
              },
              "status": {
                "type": "string",
                "enum": ["Active", "Sold"]
              },
              "condition": {
                "type": "string",
                "enum": ["New", "Used"]
              },
              "location": {
                "type": "object",
                "properties": {
                  "lat": {
                    "type": "number",
                    "example": 38.355
                  },
                  "lng": {
                    "type": "number",
                    "example": 25.369
                  }
                }
              },
              "seller": {
                "type": "string",
                "example": "62ee685e158e683e851ecceF"
              },
              "buyer": {
                "type": "string"
              },
              "requestedBuyers": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "userRequestBody": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "example": "Peter"
          },
          "lastName": {
            "type": "string",
            "example": "Griffin"
          },
          "email": {
            "type": "string",
            "example": "griffin@mail.com"
          },
          "schoolName": {
            "type": "string",
            "example": "Princeton University"
          },
          "password": {
            "type": "string",
            "example": "abC123"
          }
        },
        "required": ["firstName", "lastName", "email", "schoolName", "password"]
      },
      "returnedUser": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "data": {
            "type": "object",
            "properties": {
              "_id": {
                "type": "string",
                "example": "62ed149a0785e2f2a4ff07b3"
              },
              "firstName": {
                "type": "string",
                "example": "Peter"
              },
              "lastName": {
                "type": "string",
                "example": "Griffin"
              },
              "fullName": {
                "type": "string",
                "example": "Peter Griffin"
              },
              "email": {
                "type": "string",
                "example": "griffin@mail.com"
              },
              "schoolName": {
                "type": "string",
                "example": "Princeton University"
              },
              "phoneNumber": {
                "type": "number",
                "example": 123456798
              },
              "address": {
                "type": "string",
                "example": "New Jersey"
              },
              "createdAt": {
                "type": "string",
                "format": "date-time"
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time"
              }
            }
          }
        }
      },
      "returnedDonation": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "data": {
            "type": "object",
            "properties": {
              "_id": {
                "type": "string",
                "example": "62ed149a0785e2f2a4ff07b3"
              },
              "amount": {
                "type": "number",
                "example": 25
              },
              "fullName": {
                "type": "string",
                "example": "Peter Griffin"
              },
              "email": {
                "type": "string",
                "example": "griffin@mail.com"
              }
            }
          }
        }
      },
      "returnedOrder": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "example": "62ed149a0785e2f2a4ff07b3"
                },
                "buyer": {
                  "type": "object",
                  "properties": {
                    "_id": {
                      "type": "string",
                      "example": "62fe7d2bbb3858446e7d6c00"
                    },
                    "address": {
                      "type": "string",
                      "example": "X Apartment Y Street Z Province Istanbul/Turkey"
                    }
                  }
                },
                "orderDate": {
                  "type": "string",
                  "format": "date-time"
                },
                "notes": {
                  "type": "string",
                  "example": "Please send this product asap!"
                },
                "product": {
                  "type": "object",
                  "properties": {
                    "_id": {
                      "type": "string",
                      "example": "62fa729915810a408c79f13b"
                    },
                    "title": {
                      "type": "string",
                      "example": "iPhone 13 Pro"
                    },
                    "description": {
                      "type": "string",
                      "example": "New iPhone 13 Pro!"
                    },
                    "price": {
                      "type": "number",
                      "example": 2500
                    },
                    "category": {
                      "type": "string",
                      "example": "Electronics"
                    },
                    "coverImage": {
                      "type": "string",
                      "example": "https://storage.googleapis.com/recoded_studen_store_bucket/g-935e6968-474e-4cdd-a48c-0dab2ccc0385.jpg"
                    },
                    "images": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "example": "https://student_store.com/images/image1"
                      }
                    },
                    "type": {
                      "type": "string",
                      "example": "Product"
                    },
                    "status": {
                      "type": "string",
                      "example": "Sold"
                    },
                    "condition": {
                      "type": "string",
                      "example": "Used"
                    },
                    "seller": {
                      "type": "string",
                      "example": "62ee685e158e683e851ecceF"
                    },
                    "location": {
                      "type": "object",
                      "properties": {
                        "lat": {
                          "type": "number",
                          "example": 33.25
                        },
                        "lng": {
                          "type": "number",
                          "example": 48.55
                        }
                      }
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "updatedAt": {
                      "type": "string",
                      "format": "date-time"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Profile": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "62ed149a0785e2f2a4ff07b3"
        },
        "provider": {
          "type": "string",
          "example": "google"
        },
        "firstName": {
          "type": "string",
          "example": "Melek"
        },
        "lastName": {
          "type": "string",
          "example": "Arslan"
        },
        "profilePhoto": {
          "type": "string",
          "example": "http://www.cheese.com/leyden.jpeg"
        },
        "email": {
          "type": "string",
          "example": "melekarslan.ie@gmail.com"
        },
        "schoolName": {
          "type": "string",
          "example": "Bilkent"
        },
        "phoneNumber": {
          "type": "number",
          "example": "543508765"
        },
        "address": {
          "type": "string",
          "example": "İstanbul"
        }
      }
    }
  },
  "schemes": ["http"],
  "consumes": ["application/json"],
  "produces": ["application/json"]
}
